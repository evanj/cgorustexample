// Package gorustmodule demonstrates wrapping a Rust library in Go.
package gorustmodule

/*
#include <stdint.h>
extern int32_t copy_rust_message(char *buffer, size_t buffer_len);
*/
import "C"
import (
	"fmt"
	"unsafe"
)

// RustMessage returns a string generated by Rust.
func RustMessage() (string, error) {
	// The Rust API requires us to pass in a buffer that we own.
	const MAX_BUFFER_LEN = 1024
	var buf [MAX_BUFFER_LEN]byte

	cPtr := (*C.char)(unsafe.Pointer(&buf[0]))
	result := C.copy_rust_message(cPtr, (C.size_t)(len(buf)))
	if result < 0 {
		fmt.Errorf("copy_rust_message returned error code %d", result)
	}

	return string(buf[0:result]), nil
}
